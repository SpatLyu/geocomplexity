[{"path":"https://spatlyu.github.io/geocomplexity/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wenbo Lv. Author, maintainer, copyright holder. Yongze Song. Author, reviewer, thesis advisor.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lv W, Song Y (2024). geocomplexity: Geocomplexity mitigates spatial bias. R package version 0.0.0.9000, https://github.com/SpatLyu/geocomplexity/, https://spatlyu.github.io/geocomplexity/.","code":"@Manual{,   title = {geocomplexity: Geocomplexity mitigates spatial bias},   author = {Wenbo Lv and Yongze Song},   year = {2024},   note = {R package version 0.0.0.9000, https://github.com/SpatLyu/geocomplexity/},   url = {https://spatlyu.github.io/geocomplexity/}, }"},{"path":"https://spatlyu.github.io/geocomplexity/index.html","id":"geocomplexity-","dir":"","previous_headings":"","what":"geocomplexity | Geocomplexity mitigates spatial bias\n","title":"geocomplexity | Geocomplexity mitigates spatial bias\n","text":"goal geocomplexity support geocomplexity computation applications.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"geocomplexity | Geocomplexity mitigates spatial bias\n","text":"Full document recent release geocomplexity online: https://spatlyu.github.io/geocomplexity/","code":""},{"path":"https://spatlyu.github.io/geocomplexity/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"geocomplexity | Geocomplexity mitigates spatial bias\n","text":"Please install Rcpp corresponding C++ compilation environment advance. can install development version geocomplexity github : can also install binary version geocomplexity r-universe:","code":"# install.packages(\"devtools\") devtools::install_github(\"SpatLyu/geocomplexity\",                          dep = TRUE) install.packages(\"geocomplexity\",                   repos = c(\"https://spatlyu.r-universe.dev\",                            \"https://cran.rstudio.com/\"),                  dep = TRUE)"},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocd_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"calculates geocomplexity for raster data based on spatial dependence — geocd_raster","title":"calculates geocomplexity for raster data based on spatial dependence — geocd_raster","text":"function calculates geocomplexity raster data based spatial dependence.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocd_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculates geocomplexity for raster data based on spatial dependence — geocd_raster","text":"","code":"geocd_raster(r, order = 1, normalize = TRUE)"},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocd_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculates geocomplexity for raster data based on spatial dependence — geocd_raster","text":"r Raster object can converted SpatRaster terra::rast(). order (optional) order adjacency object. Default 1. normalize (optional) Whether normalizes spatial local complexity. Default TRUE.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocd_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculates geocomplexity for raster data based on spatial dependence — geocd_raster","text":"SpatRaster object","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocd_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculates geocomplexity for raster data based on spatial dependence — geocd_raster","text":"","code":"library(terra) #> terra 1.7.78 m = matrix(c(3,3,3,3,1,3,              3,3,3,2,1,2,              3,3,3,1,2,1,              1,3,2,2,2,2,              2,2,2,1,1,2,              1,2,1,1,1,1),            nrow = 6,            byrow = TRUE) m = rast(m) names(m) = 'sim' plot(m, col = c(\"#d2eaac\", \"#a3dae1\", \"#8cc1e1\"))  gc1 = geocd_raster(m,1) gc2 = geocd_raster(m,2) gc1 #> class       : SpatRaster  #> dimensions  : 6, 6, 1  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 6, 0, 6  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : Geocomplexity_sim  #> min value   :                 0  #> max value   :                 1  gc2 #> class       : SpatRaster  #> dimensions  : 6, 6, 1  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 6, 0, 6  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : Geocomplexity_sim  #> min value   :                 0  #> max value   :                 1"},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocd_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"calculates geocomplexity for vector data based on spatial dependence — geocd_vector","title":"calculates geocomplexity for vector data based on spatial dependence — geocd_vector","text":"function calculates geocomplexity vector data based spatial dependence.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocd_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculates geocomplexity for vector data based on spatial dependence — geocd_vector","text":"","code":"geocd_vector(sfj, wt = NULL, normalize = TRUE)"},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocd_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculates geocomplexity for vector data based on spatial dependence — geocd_vector","text":"sfj Vector object can converted sf sf::st_as_sf(). wt (optional) Spatial weight matrix. Must matrix class. can get spatial weight matrix spdep,rgeoda tidyrgeoda package. wt provided, geocomplexity use first-order queen adjacency binary matrix. normalize (optional) Whether normalizes spatial local complexity. Default TRUE.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocd_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculates geocomplexity for vector data based on spatial dependence — geocd_vector","text":"sf object","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocd_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculates geocomplexity for vector data based on spatial dependence — geocd_vector","text":"","code":"library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE data(\"income\") inc = dplyr::select(income,Income) gc = geocd_vector(inc) gc #> Simple feature collection with 333 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 112.9211 ymin: -43.63305 xmax: 153.6299 ymax: -9.223927 #> Geodetic CRS:  GDA94 #> # A tibble: 333 × 2 #>    Geocomplexity_Income                                                 geometry #>                   <dbl>                                       <MULTIPOLYGON [°]> #>  1                0.663 (((149.979 -35.50246, 149.964 -35.50079, 149.9494 -35.5… #>  2                0.642 (((148.8041 -35.71402, 148.8279 -35.72615, 148.8347 -35… #>  3                0.636 (((150.3754 -35.56524, 150.3647 -35.57078, 150.3226 -35… #>  4                0.671 (((149.0114 -33.93276, 149.0251 -33.93214, 149.0335 -33… #>  5                0.638 (((147.7137 -34.16162, 147.7441 -34.14091, 147.7769 -34… #>  6                0.668 (((151.485 -33.39868, 151.4689 -33.40979, 151.4439 -33.… #>  7                0.676 (((151.485 -33.39868, 151.4623 -33.39893, 151.4539 -33.… #>  8                0.656 (((149.323 -33.05916, 149.3436 -33.06254, 149.3543 -33.… #>  9                0.619 (((149.1264 -33.86642, 149.1198 -33.88783, 149.1048 -33… #> 10                0.673 (((150.5587 -32.75774, 150.5493 -32.77053, 150.557 -32.… #> # ℹ 323 more rows  library(ggplot2) library(viridis) #> Loading required package: viridisLite ggplot(gc) +    geom_sf(aes(fill = Geocomplexity_Income)) +    scale_fill_viridis(option=\"mako\", direction = -1) +    theme_bw()"},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocs_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"calculates geocomplexity for raster data based on spatial similarity — geocs_raster","title":"calculates geocomplexity for raster data based on spatial similarity — geocs_raster","text":"function calculates geocomplexity raster data based spatial similarity.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocs_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculates geocomplexity for raster data based on spatial similarity — geocs_raster","text":"","code":"geocs_raster(r, order = 1, normalize = TRUE)"},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocs_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculates geocomplexity for raster data based on spatial similarity — geocs_raster","text":"r Raster object can converted SpatRaster terra::rast(). order (optional) order adjacency object. Default 1. normalize (optional) Whether normalizes spatial local complexity. Default TRUE.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocs_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculates geocomplexity for raster data based on spatial similarity — geocs_raster","text":"SpatRaster object","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocs_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculates geocomplexity for raster data based on spatial similarity — geocs_raster","text":"","code":"library(terra) m1 = matrix(c(3,3,3,3,1,3,               3,3,3,2,1,2,               3,3,3,1,2,1,               1,3,2,2,2,2,               2,2,2,1,1,2,               1,2,1,1,1,1),            nrow = 6,            byrow = TRUE) m1 = rast(m1) names(m1) = 'sim1' m2 = m1 set.seed(123456789) values(m2) = values(m1) + runif(ncell(m1),-1,1) names(m2) = 'sim2' m = c(m1,m2) gc1 = geocs_raster(m,1) #> out[n]: 0.00187258 #> out[n]: 0.00163722 #> out[n]: 0.392036 #> out[n]: 0.813315 #> out[n]: 0.416154 #> out[n]: 0.774688 #> out[n]: 0.00364055 #> out[n]: 0.00716633 #> out[n]: 0.448343 #> out[n]: 0.496854 #> out[n]: 0.743974 #> out[n]: 0.637262 #> out[n]: 0.465276 #> out[n]: 0.441515 #> out[n]: 0.587277 #> out[n]: 0.706324 #> out[n]: 0.804233 #> out[n]: 0.664927 #> out[n]: 0.497814 #> out[n]: 0.67717 #> out[n]: 0.64553 #> out[n]: 0.655879 #> out[n]: 0.728345 #> out[n]: 0.773223 #> out[n]: 0.681367 #> out[n]: 0.70456 #> out[n]: 0.735318 #> out[n]: 0.403905 #> out[n]: 0.464114 #> out[n]: 0.641686 #> out[n]: 0.72332 #> out[n]: 0.805206 #> out[n]: 0.631408 #> out[n]: 0.0631517 #> out[n]: 0.167122 #> out[n]: 0.529419 gc2 = geocs_raster(m,2) #> out[n]: 0.00303917 #> out[n]: 0.463881 #> out[n]: 0.725901 #> out[n]: 0.791166 #> out[n]: 0.482306 #> out[n]: 0.741561 #> out[n]: 0.372749 #> out[n]: 0.585499 #> out[n]: 0.595511 #> out[n]: 0.622861 #> out[n]: 0.784471 #> out[n]: 0.747077 #> out[n]: 0.533071 #> out[n]: 0.467581 #> out[n]: 0.705394 #> out[n]: 0.755247 #> out[n]: 0.676512 #> out[n]: 0.75538 #> out[n]: 0.468205 #> out[n]: 0.762843 #> out[n]: 0.569149 #> out[n]: 0.654691 #> out[n]: 0.58566 #> out[n]: 0.619767 #> out[n]: 0.626272 #> out[n]: 0.591765 #> out[n]: 0.583908 #> out[n]: 0.647274 #> out[n]: 0.439149 #> out[n]: 0.571637 #> out[n]: 0.664277 #> out[n]: 0.663787 #> out[n]: 0.63854 #> out[n]: 0.361908 #> out[n]: 0.213461 #> out[n]: 0.608959 gc1 #> class       : SpatRaster  #> dimensions  : 6, 6, 1  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 6, 0, 6  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : Geocomplexity_sim1_sim2  #> min value   :               -1.207615  #> max value   :                1.207615  gc2 #> class       : SpatRaster  #> dimensions  : 6, 6, 1  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 6, 0, 6  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> name        : Geocomplexity_sim1_sim2  #> min value   :               -1.207615  #> max value   :                1.207615"},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocs_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"calculates geocomplexity for vector data based on spatial similarity — geocs_vector","title":"calculates geocomplexity for vector data based on spatial similarity — geocs_vector","text":"function calculates geocomplexity vector data based spatial similarity.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocs_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculates geocomplexity for vector data based on spatial similarity — geocs_vector","text":"","code":"geocs_vector(sfj, wt = NULL, normalize = TRUE)"},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocs_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculates geocomplexity for vector data based on spatial similarity — geocs_vector","text":"sfj Vector object can converted sf sf::st_as_sf(). wt (optional) Spatial weight matrix. Must matrix class. can get spatial weight matrix spdep,rgeoda tidyrgeoda package. wt provided, geocomplexity use first-order inverse distance weight matrix via inverse_distance_weight(). normalize (optional) Whether normalizes spatial local complexity. Default TRUE.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocs_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculates geocomplexity for vector data based on spatial similarity — geocs_vector","text":"sf object","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/geocs_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculates geocomplexity for vector data based on spatial similarity — geocs_vector","text":"","code":"library(sf) data(\"income\") income = dplyr::select(income,-SA3_CODE16) gc = geocs_vector(income) gc #> Simple feature collection with 333 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 112.9211 ymin: -43.63305 xmax: 153.6299 ymax: -9.223927 #> Geodetic CRS:  GDA94 #> # A tibble: 333 × 2 #>    Geocomplexity_Income_Gini                                            geometry #>                        <dbl>                                  <MULTIPOLYGON [°]> #>  1                    0.0677 (((149.979 -35.50246, 149.964 -35.50079, 149.9494 … #>  2                    0.320  (((148.8041 -35.71402, 148.8279 -35.72615, 148.834… #>  3                    0.0513 (((150.3754 -35.56524, 150.3647 -35.57078, 150.322… #>  4                    0.982  (((149.0114 -33.93276, 149.0251 -33.93214, 149.033… #>  5                    0.0464 (((147.7137 -34.16162, 147.7441 -34.14091, 147.776… #>  6                    0.606  (((151.485 -33.39868, 151.4689 -33.40979, 151.4439… #>  7                    0.996  (((151.485 -33.39868, 151.4623 -33.39893, 151.4539… #>  8                    0.993  (((149.323 -33.05916, 149.3436 -33.06254, 149.3543… #>  9                    0.0268 (((149.1264 -33.86642, 149.1198 -33.88783, 149.104… #> 10                    0.708  (((150.5587 -32.75774, 150.5493 -32.77053, 150.557… #> # ℹ 323 more rows  library(ggplot2) library(viridis) ggplot(gc) +    geom_sf(aes(fill = Geocomplexity_Income_Gini)) +    scale_fill_viridis(option=\"mako\", direction = -1) +    theme_bw()"},{"path":"https://spatlyu.github.io/geocomplexity/reference/income.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial datasets of income. — income","title":"Spatial datasets of income. — income","text":"Spatial datasets income.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/income.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial datasets of income. — income","text":"","code":"income"},{"path":"https://spatlyu.github.io/geocomplexity/reference/income.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spatial datasets of income. — income","text":"income: sf object income","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/income.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spatial datasets of income. — income","text":"Yongze Song yongze.song@curtin.edu.au","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/inverse_distance_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"calculate inverse distance weight — inverse_distance_weight","title":"calculate inverse distance weight — inverse_distance_weight","text":"Function calculate inverse distance weight.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/inverse_distance_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculate inverse distance weight — inverse_distance_weight","text":"","code":"inverse_distance_weight(sfj, power = 1)"},{"path":"https://spatlyu.github.io/geocomplexity/reference/inverse_distance_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculate inverse distance weight — inverse_distance_weight","text":"sfj Vector object can converted sf sf::st_as_sf(). power (optional) Default 1. Set 2 gravity weights.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/inverse_distance_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculate inverse distance weight — inverse_distance_weight","text":"inverse distance weight matrices class matrix.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/inverse_distance_weight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"calculate inverse distance weight — inverse_distance_weight","text":"inverse distance weight formula \\(w_{ij} = 1 / d_{ij}^\\alpha\\)","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/inverse_distance_weight.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"calculate inverse distance weight — inverse_distance_weight","text":"Wenbo Lv lyu.geosocial@gmail.com","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/inverse_distance_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"calculate inverse distance weight — inverse_distance_weight","text":"","code":"data(\"income\") wt = inverse_distance_weight(income) wt[1:5,1:5] #>              1            2            3            4            5 #> 1 0.000000e+00 8.154759e-06 8.868678e-06 9.068506e-06 8.075121e-06 #> 2 8.154759e-06 0.000000e+00 1.250288e-05 4.424774e-06 4.986257e-06 #> 3 8.868678e-06 1.250288e-05 0.000000e+00 4.506214e-06 4.392548e-06 #> 4 9.068506e-06 4.424774e-06 4.506214e-06 0.000000e+00 1.151216e-05 #> 5 8.075121e-06 4.986257e-06 4.392548e-06 1.151216e-05 0.000000e+00"},{"path":"https://spatlyu.github.io/geocomplexity/reference/normalize_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"normalization — normalize_vector","title":"normalization — normalize_vector","text":"normalization","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/normalize_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"normalization — normalize_vector","text":"","code":"normalize_vector(x)"},{"path":"https://spatlyu.github.io/geocomplexity/reference/normalize_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"normalization — normalize_vector","text":"x continuous numeric vector.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/normalize_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"normalization — normalize_vector","text":"continuous vector normalized.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/normalize_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"normalization — normalize_vector","text":"","code":"normalize_vector(c(-5,1,5,0.01,0.99)) #> [1] 0.000 0.600 1.000 0.501 0.599"},{"path":"https://spatlyu.github.io/geocomplexity/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://spatlyu.github.io/geocomplexity/reference/standardize_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"standardization — standardize_vector","title":"standardization — standardize_vector","text":"standardization","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/standardize_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"standardization — standardize_vector","text":"","code":"standardize_vector(x)"},{"path":"https://spatlyu.github.io/geocomplexity/reference/standardize_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"standardization — standardize_vector","text":"x numeric vector","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/standardize_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"standardization — standardize_vector","text":"standardized numeric vector","code":""},{"path":"https://spatlyu.github.io/geocomplexity/reference/standardize_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"standardization — standardize_vector","text":"","code":"standardize_vector(1:10) #>  [1] -1.4863011 -1.1560120 -0.8257228 -0.4954337 -0.1651446  0.1651446 #>  [7]  0.4954337  0.8257228  1.1560120  1.4863011"}]
